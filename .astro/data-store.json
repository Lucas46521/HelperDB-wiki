[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.11.1","content-config-digest","8ad251f854d42acc","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"where\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":\"0.0.0.0\",\"port\":5000,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":false,\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[null,null,null],\"rehypePlugins\":[null,[null,{\"experimentalHeadingIdCompat\":false}],null,[null,{\"themes\":[\"dark-plus\",\"github-light\"],\"defaultLocale\":\"en\",\"cascadeLayer\":\"starlight.components\",\"styleOverrides\":{\"borderRadius\":\"0px\",\"borderWidth\":\"1px\",\"codePaddingBlock\":\"0.75rem\",\"codePaddingInline\":\"1rem\",\"codeFontFamily\":\"var(--__sl-font-mono)\",\"codeFontSize\":\"var(--sl-text-code)\",\"codeLineHeight\":\"var(--sl-line-height)\",\"uiFontFamily\":\"var(--__sl-font)\",\"textMarkers\":{\"lineDiffIndicatorMarginLeft\":\"0.25rem\",\"defaultChroma\":\"45\",\"backgroundOpacity\":\"60%\"}},\"plugins\":[{\"name\":\"Starlight Plugin\",\"hooks\":{}},{\"name\":\"astro-expressive-code\",\"hooks\":{}}]}]],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false},\"legacy\":{\"collections\":false},\"prefetch\":{\"prefetchAll\":true},\"i18n\":{\"defaultLocale\":\"en\",\"locales\":[\"en\"],\"routing\":{\"prefixDefaultLocale\":false,\"redirectToDefaultLocale\":false,\"fallbackType\":\"redirect\"}}}","docs",["Map",11,12,47,48,60,61,72,73,84,85],"index",{"id":11,"data":13,"body":41,"filePath":42,"assetImports":43,"digest":45,"legacyId":46,"deferredRender":16},{"title":14,"description":15,"editUrl":16,"head":17,"template":18,"hero":19,"sidebar":38,"pagefind":16,"draft":39},"Welcome to Helper.db","A powerful and flexible database management library for Node.js applications.",true,[],"splash",{"tagline":20,"image":21,"actions":24},"A powerful and flexible database management library for Node.js applications. Built for performance, designed for simplicity.",{"alt":22,"file":23},"","__ASTRO_IMAGE_../../assets/logo-with-text.png",[25,32],{"text":26,"link":27,"variant":28,"icon":29},"Get Started","/guides/introduction/","primary",{"type":30,"name":31},"icon","right-arrow",{"text":33,"link":34,"variant":35,"icon":36},"View on GitHub","https://github.com/your-username/helper.db","minimal",{"type":30,"name":37},"external",{"hidden":39,"attrs":40},false,{},"import { Card, CardGrid } from '@astrojs/starlight/components';\n\n\u003Cdiv class=\"not-content\">\n  \u003Cdiv class=\"flex flex-wrap items-center justify-center gap-2 mb-8\">\n    \u003Cimg src=\"https://img.shields.io/npm/v/helper.db?color=5865f2&style=for-the-badge\" alt=\"npm version\" />\n    \u003Cimg src=\"https://img.shields.io/npm/dt/helper.db?color=5865f2&style=for-the-badge\" alt=\"npm downloads\" />\n    \u003Cimg src=\"https://img.shields.io/github/stars/Lucas46521/Helper-db?color=5865f2&style=for-the-badge\" alt=\"GitHub stars\" />\n    \u003Cimg src=\"https://img.shields.io/badge/Node.js-16.9.0+-green?style=for-the-badge\" alt=\"Node.js version\" />\n  \u003C/div>\n\u003C/div>\n\n## 🚀 Visão Geral\n\nHelper.DB é uma **biblioteca de banco de dados JavaScript** que permite interagir facilmente com bancos de dados de forma simples e intuitiva.\n\n### ✨ Características\n\n- **Orientado a objetos** - API limpa e intuitiva\n- **Abstrações previsíveis** - Métodos consistentes e fáceis de usar\n- **Performático** - Otimizado para velocidade\n- **Cobertura completa** - 100% de cobertura das operações de banco de dados\n\n## 📦 Instalação\n\n**Node.js 16.9.0 ou superior é necessário.**\n\n```bash\nnpm install helper.db\n```\n\n\u003Cdiv class=\"not-content\">\n  \u003Cdiv class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 my-8\">\n    \u003Cdiv class=\"bg-card border border-border rounded-lg p-4 text-center\">\n      \u003Ccode class=\"text-sm font-mono\">npm install helper.db\u003C/code>\n    \u003C/div>\n    \u003Cdiv class=\"bg-card border border-border rounded-lg p-4 text-center\">\n      \u003Ccode class=\"text-sm font-mono\">yarn add helper.db\u003C/code>\n    \u003C/div>\n    \u003Cdiv class=\"bg-card border border-border rounded-lg p-4 text-center\">\n      \u003Ccode class=\"text-sm font-mono\">pnpm add helper.db\u003C/code>\n    \u003C/div>\n    \u003Cdiv class=\"bg-card border border-border rounded-lg p-4 text-center\">\n      \u003Ccode class=\"text-sm font-mono\">bun add helper.db\u003C/code>\n    \u003C/div>\n  \u003C/div>\n\u003C/div>\n\n## 🔧 Uso Rápido\n\n```javascript\nconst { Database } = require('helper.db');\n\n// Criar uma nova instância do banco de dados\nconst db = new Database('./meu-banco.db');\n\n// Armazenar dados do usuário\nawait db.set('usuarios.123456789', {\n  nome: 'João Silva',\n  nivel: 1,\n  moedas: 100\n});\n\n// Recuperar dados do usuário\nconst usuario = await db.get('usuarios.123456789');\nconsole.log(usuario); // { nome: 'João Silva', nivel: 1, moedas: 100 }\n\n// Atualizar propriedades específicas\nawait db.add('usuarios.123456789.moedas', 50);\nawait db.set('usuarios.123456789.nivel', 2);\n\n// Trabalhar com arrays\nawait db.push('usuarios.123456789.inventario', 'espada');\nawait db.push('usuarios.123456789.inventario', 'escudo');\n\n// Verificar se os dados existem\nconst temUsuario = await db.has('usuarios.123456789');\nconsole.log(temUsuario); // true\n```\n\n\u003CCardGrid>\n  \u003CCard title=\"📖 Guias\" icon=\"document\">\n    Aprenda a usar o Helper.DB com nossos guias passo a passo.\n    \u003Ca href=\"/guides/introduction/\" class=\"inline-flex items-center gap-1 text-primary hover:underline mt-2\">\n      Começar agora →\n    \u003C/a>\n  \u003C/Card>\n\n  \u003CCard title=\"🔍 Referência da API\" icon=\"laptop\">\n    Documentação completa de todos os métodos disponíveis.\n    \u003Ca href=\"/reference/database/\" class=\"inline-flex items-center gap-1 text-primary hover:underline mt-2\">\n      Ver API →\n    \u003C/a>\n  \u003C/Card>\n\n  \u003CCard title=\"💬 Suporte\" icon=\"external\">\n    Precisa de ajuda? Junte-se à nossa comunidade no Discord.\n    \u003Ca href=\"https://discord.gg/helper-db\" class=\"inline-flex items-center gap-1 text-primary hover:underline mt-2\">\n      Discord →\n    \u003C/a>\n  \u003C/Card>\n\n  \u003CCard title=\"🐛 Issues\" icon=\"github\">\n    Encontrou um bug ou tem uma sugestão? Abra uma issue no GitHub.\n    \u003Ca href=\"https://github.com/Lucas46521/Helper-db/issues\" class=\"inline-flex items-center gap-1 text-primary hover:underline mt-2\">\n      GitHub Issues →\n    \u003C/a>\n  \u003C/Card>\n\u003C/CardGrid>\n\n## 🔗 Links Úteis\n\n- **[Website](https://helper-db.com)** - Site oficial\n- **[Documentação](https://helper-db.com/docs)** - Documentação completa\n- **[GitHub](https://github.com/Lucas46521/Helper-db)** - Código fonte\n- **[npm](https://www.npmjs.com/package/helper.db)** - Pacote no npm\n- **[Discord](https://discord.gg/helper-db)** - Servidor da comunidade\n\n## 🤝 Contribuindo\n\nAntes de criar uma issue, verifique se ela já não foi reportada e consulte a documentação.\n\nSe você não entende algo na documentação, está enfrentando problemas ou apenas precisa de uma orientação, não hesite em se juntar ao nosso [Servidor Discord oficial](https://discord.gg/helper-db).\n\n---\n\n\u003Cdiv class=\"not-content text-center mt-12 p-6 bg-gradient-to-r from-primary/10 to-accent/10 rounded-lg border border-border\">\n  \u003Ch3 class=\"text-xl font-semibold mb-4\">Pronto para começar?\u003C/h3>\n  \u003Cdiv class=\"flex flex-col sm:flex-row gap-4 items-center justify-center\">\n    \u003Ca href=\"/guides/introduction/\" class=\"inline-flex items-center gap-2 bg-primary text-primary-foreground px-6 py-3 rounded-lg font-medium hover:bg-primary/90 transition-colors\">\n      📚 Ler a documentação\n    \u003C/a>\n    \u003Ca href=\"https://github.com/Lucas46521/Helper-db\" class=\"inline-flex items-center gap-2 bg-secondary text-secondary-foreground px-6 py-3 rounded-lg font-medium hover:bg-secondary/90 transition-colors\">\n      ⭐ Dar uma estrela no GitHub\n    \u003C/a>\n  \u003C/div>\n\u003C/div>","src/content/docs/index.mdx",[44],"../../assets/logo-with-text.png","a8a64f34445d5efc","index.mdx","guides/installation",{"id":47,"data":49,"body":56,"filePath":57,"digest":58,"legacyId":59,"deferredRender":16},{"title":50,"description":51,"editUrl":16,"head":52,"template":53,"sidebar":54,"pagefind":16,"draft":39},"Installation","Learn how to install and set up Helper.db in your Node.js project",[],"doc",{"hidden":39,"attrs":55},{},"# Installation\n\nGet Helper.db up and running in your Node.js project in just a few simple steps.\n\n## Prerequisites\n\nBefore installing Helper.db, make sure you have:\n\n- **Node.js** version 14.0 or higher\n- **npm** or **yarn** package manager\n- A Node.js project initialized with `package.json`\n\n## Install via npm\n\n```bash\nnpm install helper.db\n```\n\n## Install via yarn\n\n```bash\nyarn add helper.db\n```\n\n## Verify Installation\n\nCreate a simple test file to verify Helper.db is working correctly:\n\n```javascript\n// test-helper.js\nconst { Database } = require('helper.db');\n\nasync function testInstallation() {\n  try {\n    const db = new Database(':memory:'); // In-memory database for testing\n    console.log('✅ Helper.db installed successfully!');\n    \n    // Test basic operations\n    await db.insert('test', { message: 'Hello Helper.db!' });\n    const result = await db.find('test');\n    console.log('📦 Test data:', result);\n    \n  } catch (error) {\n    console.error('❌ Installation test failed:', error);\n  }\n}\n\ntestInstallation();\n```\n\nRun the test:\n\n```bash\nnode test-helper.js\n```\n\nYou should see:\n```\n✅ Helper.db installed successfully!\n📦 Test data: [{ id: 1, message: 'Hello Helper.db!' }]\n```\n\n## TypeScript Support\n\nHelper.db includes built-in TypeScript definitions. No additional `@types` package needed!\n\n```typescript\nimport { Database, Query, Backup } from 'helper.db';\n\nconst db: Database = new Database('myapp.db');\n```\n\n## Environment Setup\n\n### Development Environment\n\nFor development, you might want to use file-based databases:\n\n```javascript\nconst { Database } = require('helper.db');\nconst db = new Database('./dev-database.db');\n```\n\n### Production Environment\n\nFor production, consider using environment variables:\n\n```javascript\nconst { Database } = require('helper.db');\nconst dbPath = process.env.DATABASE_PATH || './production.db';\nconst db = new Database(dbPath);\n```\n\n### Testing Environment\n\nFor testing, use in-memory databases:\n\n```javascript\nconst { Database } = require('helper.db');\nconst db = new Database(':memory:'); // Temporary, in-memory database\n```\n\n## Common Installation Issues\n\n### Node.js Version Compatibility\n\nIf you encounter compatibility issues, ensure you're using Node.js 14 or higher:\n\n```bash\nnode --version\n```\n\n### Permission Issues\n\nOn Unix systems, you might need to adjust file permissions:\n\n```bash\nchmod 755 ./database-directory\n```\n\n### SQLite Dependencies\n\nHelper.db uses SQLite under the hood. If you encounter native module compilation issues:\n\n```bash\nnpm rebuild\n# or\nnpm install --build-from-source\n```\n\n## Next Steps\n\nNow that Helper.db is installed, you're ready to start building! \n\nContinue to the [Quick Start Guide](/guides/quick-start/) to create your first database operations.","src/content/docs/guides/installation.mdx","af36ff7de5bf6a98","guides/installation.mdx","guides/introduction",{"id":60,"data":62,"body":68,"filePath":69,"digest":70,"legacyId":71,"deferredRender":16},{"title":63,"description":64,"editUrl":16,"head":65,"template":53,"sidebar":66,"pagefind":16,"draft":39},"Introduction","Get started with Helper.db - A powerful Node.js database helper module",[],{"hidden":39,"attrs":67},{},"# Introduction\n\nWelcome to **Helper.db** - a powerful Node.js module that makes database interactions simple and intuitive.\n\n## What is Helper.db?\n\nHelper.db is designed to simplify database operations while providing:\n\n- **Object-oriented approach**: Clean, readable code patterns\n- **Predictable abstractions**: Consistent API across different operations  \n- **High performance**: Optimized for speed and efficiency\n- **100% coverage**: Complete database operation support\n\n## Key Features\n\n### Simple Database Operations\n```javascript\nconst { Database } = require('helper.db');\nconst db = new Database('myDatabase.db');\n\n// Insert data\nawait db.insert('users', { name: 'John', age: 30 });\n\n// Query data\nconst users = await db.find('users', { age: { $gt: 25 } });\n\n// Update data\nawait db.update('users', { name: 'John' }, { age: 31 });\n```\n\n### Advanced Querying\n```javascript\n// Complex queries made simple\nconst results = await db.query()\n  .from('users')\n  .where('age', '>', 18)\n  .and('status', '=', 'active')\n  .orderBy('created_at', 'desc')\n  .limit(10)\n  .execute();\n```\n\n### Built-in Backup System\n```javascript\n// Automatic backups\nconst backup = new Backup(db);\nawait backup.create('backup_20240101.db');\nawait backup.restore('backup_20240101.db');\n```\n\n## Why Choose Helper.db?\n\n- **Easy to learn**: Intuitive API that follows JavaScript best practices\n- **Flexible**: Works with various database engines\n- **Reliable**: Extensively tested and battle-proven\n- **Well documented**: Comprehensive guides and examples\n\n## Next Steps\n\nReady to get started? Check out our [Installation Guide](/guides/installation/) to begin using Helper.db in your project.\n\nOr jump straight to the [Quick Start Guide](/guides/quick-start/) to see Helper.db in action!","src/content/docs/guides/introduction.mdx","f8fc58afe20abbf0","guides/introduction.mdx","guides/quick-start",{"id":72,"data":74,"body":80,"filePath":81,"digest":82,"legacyId":83,"deferredRender":16},{"title":75,"description":76,"editUrl":16,"head":77,"template":53,"sidebar":78,"pagefind":16,"draft":39},"Quick Start","Get up and running with Helper.db in minutes with this quick start guide",[],{"hidden":39,"attrs":79},{},"# Quick Start\n\nGet up and running with Helper.db in just a few minutes! This guide will walk you through the basics.\n\n## Your First Database\n\nLet's create a simple user management system:\n\n```javascript\nconst { Database } = require('helper.db');\n\n// Create or connect to a database\nconst db = new Database('users.db');\n\nasync function main() {\n  // Create a users table (if it doesn't exist)\n  await db.createTable('users', {\n    id: 'INTEGER PRIMARY KEY AUTOINCREMENT',\n    name: 'TEXT NOT NULL',\n    email: 'TEXT UNIQUE',\n    age: 'INTEGER',\n    created_at: 'DATETIME DEFAULT CURRENT_TIMESTAMP'\n  });\n\n  console.log('✅ Database and table created!');\n}\n\nmain().catch(console.error);\n```\n\n## Insert Data\n\nAdd some users to your database:\n\n```javascript\nasync function addUsers() {\n  // Insert a single user\n  const userId = await db.insert('users', {\n    name: 'Alice Johnson',\n    email: 'alice@example.com',\n    age: 28\n  });\n\n  console.log('👤 User created with ID:', userId);\n\n  // Insert multiple users at once\n  await db.insertMany('users', [\n    { name: 'Bob Smith', email: 'bob@example.com', age: 32 },\n    { name: 'Carol Davis', email: 'carol@example.com', age: 25 },\n    { name: 'David Wilson', email: 'david@example.com', age: 29 }\n  ]);\n\n  console.log('👥 Multiple users added!');\n}\n```\n\n## Query Data\n\nRetrieve data with simple or complex queries:\n\n```javascript\nasync function queryUsers() {\n  // Get all users\n  const allUsers = await db.find('users');\n  console.log('All users:', allUsers);\n\n  // Find users by age\n  const youngUsers = await db.find('users', { age: { $lt: 30 } });\n  console.log('Users under 30:', youngUsers);\n\n  // Find a specific user\n  const alice = await db.findOne('users', { email: 'alice@example.com' });\n  console.log('Alice:', alice);\n\n  // Advanced query with sorting\n  const sortedUsers = await db.query()\n    .from('users')\n    .where('age', '>', 25)\n    .orderBy('name', 'asc')\n    .limit(5)\n    .execute();\n  \n  console.log('Sorted results:', sortedUsers);\n}\n```\n\n## Update Data\n\nModify existing records:\n\n```javascript\nasync function updateUsers() {\n  // Update a single user\n  await db.update('users', \n    { email: 'alice@example.com' }, // condition\n    { age: 29 }                     // update data\n  );\n\n  // Update multiple users\n  await db.updateMany('users',\n    { age: { $lt: 30 } },           // condition\n    { status: 'young' }             // update data\n  );\n\n  console.log('✏️ Users updated!');\n}\n```\n\n## Delete Data\n\nRemove records when needed:\n\n```javascript\nasync function deleteUsers() {\n  // Delete a specific user\n  await db.delete('users', { email: 'bob@example.com' });\n\n  // Delete multiple users\n  await db.deleteMany('users', { age: { $gt: 35 } });\n\n  console.log('🗑️ Users deleted!');\n}\n```\n\n## Complete Example\n\nHere's a complete working example:\n\n```javascript\nconst { Database } = require('helper.db');\n\nasync function userManagementExample() {\n  const db = new Database('example.db');\n\n  try {\n    // Setup\n    await db.createTable('users', {\n      id: 'INTEGER PRIMARY KEY AUTOINCREMENT',\n      name: 'TEXT NOT NULL',\n      email: 'TEXT UNIQUE',\n      age: 'INTEGER',\n      status: 'TEXT DEFAULT \"active\"',\n      created_at: 'DATETIME DEFAULT CURRENT_TIMESTAMP'\n    });\n\n    // Add users\n    await db.insertMany('users', [\n      { name: 'Emma Thompson', email: 'emma@example.com', age: 27 },\n      { name: 'James Brown', email: 'james@example.com', age: 34 },\n      { name: 'Sofia Martinez', email: 'sofia@example.com', age: 22 }\n    ]);\n\n    // Query users\n    const activeUsers = await db.find('users', { status: 'active' });\n    console.log(`Found ${activeUsers.length} active users`);\n\n    // Update user\n    await db.update('users', \n      { name: 'Emma Thompson' }, \n      { age: 28, status: 'premium' }\n    );\n\n    // Advanced query\n    const premiumUsers = await db.query()\n      .from('users')\n      .where('status', '=', 'premium')\n      .select(['name', 'email', 'age'])\n      .execute();\n\n    console.log('Premium users:', premiumUsers);\n\n  } catch (error) {\n    console.error('Error:', error);\n  } finally {\n    await db.close();\n  }\n}\n\nuserManagementExample();\n```\n\n## Query Builder\n\nHelper.db includes a powerful query builder for complex operations:\n\n```javascript\n// Complex query with joins and conditions\nconst results = await db.query()\n  .from('users')\n  .join('orders', 'users.id', '=', 'orders.user_id')\n  .where('users.age', '>', 18)\n  .and('orders.status', '=', 'completed')\n  .groupBy('users.id')\n  .having('COUNT(orders.id)', '>', 5)\n  .orderBy('users.created_at', 'desc')\n  .limit(10)\n  .execute();\n```\n\n## Backup and Restore\n\nProtect your data with built-in backup functionality:\n\n```javascript\nconst { Backup } = require('helper.db');\n\nasync function backupExample() {\n  const backup = new Backup(db);\n\n  // Create a backup\n  await backup.create('backup-' + Date.now() + '.db');\n  console.log('📥 Backup created!');\n\n  // List all backups\n  const backups = await backup.list();\n  console.log('Available backups:', backups);\n\n  // Restore from backup (if needed)\n  // await backup.restore('backup-1234567890.db');\n}\n```\n\n## What's Next?\n\nYou now know the basics of Helper.db! Here are some next steps:\n\n- **Explore Classes**: Learn about the [Database](/reference/database/), [Query](/reference/query/), and [Backup](/reference/backup/) classes\n- **See Examples**: Check out real-world examples like [Discord Bot](/examples/discord-bot/) integration\n- **Advanced Features**: Dive into [Configuration](/advanced/configuration/) and [Performance](/advanced/performance/) tuning\n\nHappy coding! 🚀","src/content/docs/guides/quick-start.mdx","64e6004118814c0c","guides/quick-start.mdx","reference/database",{"id":84,"data":86,"body":92,"filePath":93,"digest":94,"legacyId":95,"deferredRender":16},{"title":87,"description":88,"editUrl":16,"head":89,"template":53,"sidebar":90,"pagefind":16,"draft":39},"Database Class","Complete reference for the Database class in Helper.db",[],{"hidden":39,"attrs":91},{},"# Database Class\n\nThe `Database` class is the core of Helper.db, providing a simple interface for database operations.\n\n## Constructor\n\n### `new Database(path, options?)`\n\nCreates a new database instance.\n\n#### Parameters\n\n| Name | Type | Description |\n|------|------|-------------|\n| `path` | `string` | Path to the database file or `:memory:` for in-memory database |\n| `options` | `object` | Optional configuration object |\n\n#### Example\n\n```javascript\nconst { Database } = require('helper.db');\n\n// File-based database\nconst db = new Database('./myapp.db');\n\n// In-memory database\nconst memDb = new Database(':memory:');\n\n// With options\nconst configuredDb = new Database('./app.db', {\n  verbose: true,\n  timeout: 10000\n});\n```\n\n## Methods\n\n### `insert(table, data)`\n\nInserts a single record into the specified table.\n\n#### Parameters\n\n| Name | Type | Description |\n|------|------|-------------|\n| `table` | `string` | Table name |\n| `data` | `object` | Data to insert |\n\n#### Returns\n\n`Promise\u003Cnumber>` - The ID of the inserted record\n\n#### Example\n\n```javascript\nconst userId = await db.insert('users', {\n  name: 'John Doe',\n  email: 'john@example.com',\n  age: 30\n});\n\nconsole.log('New user ID:', userId);\n```\n\n### `insertMany(table, dataArray)`\n\nInserts multiple records into the specified table.\n\n#### Parameters\n\n| Name | Type | Description |\n|------|------|-------------|\n| `table` | `string` | Table name |\n| `dataArray` | `array` | Array of objects to insert |\n\n#### Returns\n\n`Promise\u003Cnumber[]>` - Array of inserted record IDs\n\n#### Example\n\n```javascript\nconst userIds = await db.insertMany('users', [\n  { name: 'Alice', email: 'alice@example.com' },\n  { name: 'Bob', email: 'bob@example.com' }\n]);\n\nconsole.log('New user IDs:', userIds);\n```\n\n### `find(table, conditions?)`\n\nFinds records matching the specified conditions.\n\n#### Parameters\n\n| Name | Type | Description |\n|------|------|-------------|\n| `table` | `string` | Table name |\n| `conditions` | `object` | Optional query conditions |\n\n#### Returns\n\n`Promise\u003Cobject[]>` - Array of matching records\n\n#### Example\n\n```javascript\n// Find all users\nconst allUsers = await db.find('users');\n\n// Find users with conditions\nconst activeUsers = await db.find('users', { \n  status: 'active',\n  age: { $gt: 18 }\n});\n```\n\n### `findOne(table, conditions?)`\n\nFinds the first record matching the specified conditions.\n\n#### Parameters\n\n| Name | Type | Description |\n|------|------|-------------|\n| `table` | `string` | Table name |\n| `conditions` | `object` | Optional query conditions |\n\n#### Returns\n\n`Promise\u003Cobject|null>` - The first matching record or null\n\n#### Example\n\n```javascript\nconst user = await db.findOne('users', { \n  email: 'john@example.com' \n});\n\nif (user) {\n  console.log('Found user:', user.name);\n}\n```\n\n### `update(table, conditions, data)`\n\nUpdates records matching the specified conditions.\n\n#### Parameters\n\n| Name | Type | Description |\n|------|------|-------------|\n| `table` | `string` | Table name |\n| `conditions` | `object` | Query conditions |\n| `data` | `object` | Data to update |\n\n#### Returns\n\n`Promise\u003Cnumber>` - Number of affected records\n\n#### Example\n\n```javascript\nconst updatedCount = await db.update('users',\n  { email: 'john@example.com' },\n  { name: 'John Smith', age: 31 }\n);\n\nconsole.log(`Updated ${updatedCount} records`);\n```\n\n### `delete(table, conditions)`\n\nDeletes records matching the specified conditions.\n\n#### Parameters\n\n| Name | Type | Description |\n|------|------|-------------|\n| `table` | `string` | Table name |\n| `conditions` | `object` | Query conditions |\n\n#### Returns\n\n`Promise\u003Cnumber>` - Number of deleted records\n\n#### Example\n\n```javascript\nconst deletedCount = await db.delete('users', { \n  status: 'inactive',\n  last_login: { $lt: '2023-01-01' }\n});\n\nconsole.log(`Deleted ${deletedCount} inactive users`);\n```\n\n### `createTable(table, schema)`\n\nCreates a new table with the specified schema.\n\n#### Parameters\n\n| Name | Type | Description |\n|------|------|-------------|\n| `table` | `string` | Table name |\n| `schema` | `object` | Column definitions |\n\n#### Example\n\n```javascript\nawait db.createTable('products', {\n  id: 'INTEGER PRIMARY KEY AUTOINCREMENT',\n  name: 'TEXT NOT NULL',\n  price: 'DECIMAL(10,2)',\n  category_id: 'INTEGER',\n  created_at: 'DATETIME DEFAULT CURRENT_TIMESTAMP'\n});\n```\n\n### `query()`\n\nReturns a new Query builder instance for complex queries.\n\n#### Returns\n\n`Query` - Query builder instance\n\n#### Example\n\n```javascript\nconst results = await db.query()\n  .from('users')\n  .where('age', '>', 18)\n  .orderBy('name')\n  .limit(10)\n  .execute();\n```\n\n### `close()`\n\nCloses the database connection.\n\n#### Returns\n\n`Promise\u003Cvoid>`\n\n#### Example\n\n```javascript\nawait db.close();\nconsole.log('Database connection closed');\n```\n\n## Query Operators\n\nHelper.db supports various query operators for flexible data filtering:\n\n| Operator | Description | Example |\n|----------|-------------|---------|\n| `$eq` | Equal to | `{ age: { $eq: 25 } }` |\n| `$ne` | Not equal to | `{ status: { $ne: 'inactive' } }` |\n| `$gt` | Greater than | `{ age: { $gt: 18 } }` |\n| `$gte` | Greater than or equal | `{ age: { $gte: 21 } }` |\n| `$lt` | Less than | `{ age: { $lt: 65 } }` |\n| `$lte` | Less than or equal | `{ age: { $lte: 30 } }` |\n| `$in` | In array | `{ status: { $in: ['active', 'pending'] } }` |\n| `$nin` | Not in array | `{ role: { $nin: ['admin', 'moderator'] } }` |\n| `$like` | SQL LIKE pattern | `{ name: { $like: 'John%' } }` |\n| `$null` | Is null | `{ deleted_at: { $null: true } }` |\n\n## Events\n\nThe Database class emits events for various operations:\n\n```javascript\ndb.on('insert', (table, data, id) => {\n  console.log(`Inserted into ${table}:`, data, 'with ID:', id);\n});\n\ndb.on('update', (table, conditions, data, count) => {\n  console.log(`Updated ${count} records in ${table}`);\n});\n\ndb.on('delete', (table, conditions, count) => {\n  console.log(`Deleted ${count} records from ${table}`);\n});\n```\n\n## Next Steps\n\n- Learn about the [Query Builder](/reference/query/) for advanced queries\n- Explore [Backup and Restore](/reference/backup/) functionality\n- See practical examples in our [Examples](/examples/discord-bot/) section","src/content/docs/reference/database.mdx","292d55aee9c84831","reference/database.mdx"]