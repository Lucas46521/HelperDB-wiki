[["Map",1,2,7,8],"meta::meta",["Map",3,4,5,6],"astro-version","5.11.1","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://helperdb-docs.vercel.app\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"where\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":false,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":\"0.0.0.0\",\"port\":5000,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":false,\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[null,null,null],\"rehypePlugins\":[[null,{\"themes\":[\"dark-plus\",\"light-plus\"],\"styleOverrides\":{\"borderRadius\":\"0.5rem\"}}],null,[null,{\"experimentalHeadingIdCompat\":false}],null],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false},\"legacy\":{\"collections\":false},\"prefetch\":{\"prefetchAll\":true},\"i18n\":{\"defaultLocale\":\"en\",\"locales\":[\"en\"],\"routing\":{\"prefixDefaultLocale\":false,\"redirectToDefaultLocale\":false,\"fallbackType\":\"redirect\"}}}","docs",["Map",9,10,19,20,28,29],"guides/introduction",{"id":9,"data":11,"body":14,"filePath":15,"digest":16,"legacyId":17,"deferredRender":18},{"title":12,"description":13},"Introduction","Welcome to Helper.db - A powerful database helper package","import { Badge } from '../../../components/ui/badge';\n\n# Welcome to Helper.db\n\nHelper.db is a powerful and intuitive database helper package that simplifies database operations in your Node.js applications. Inspired by popular packages like discord.js and aoi.js, Helper.db provides a clean and developer-friendly API.\n\n## Features\n\n- 🚀 **Fast & Lightweight** - Optimized for performance\n- 🔧 **Easy to Use** - Simple and intuitive API\n- 🛡️ **Type Safe** - Full TypeScript support\n- 📦 **Modular** - Use only what you need\n- 🔄 **Async/Await** - Modern JavaScript patterns\n- 📖 **Well Documented** - Comprehensive documentation\n\n## Quick Example\n\n```javascript\nconst { Database } = require('helper.db');\n\nconst db = new Database('./data.json');\n\n// Set a value\nawait db.set('user.123.name', 'John Doe');\n\n// Get a value\nconst userName = await db.get('user.123.name');\nconsole.log(userName); // 'John Doe'\n\n// Check if a key exists\nconst exists = await db.has('user.123');\nconsole.log(exists); // true\n```\n\n## Why Helper.db?\n\nHelper.db was created to provide developers with a simple yet powerful solution for handling database operations. Whether you're building a Discord bot, a web application, or any Node.js project that needs data persistence, Helper.db has you covered.\n\n### Comparison with Other Solutions\n\n| Feature | Helper.db | Native JSON | Other DBs |\n|---------|-----------|-------------|-----------|\n| Easy Setup | ✅ | ❌ | ❌ |\n| Type Safety | ✅ | ❌ | ⚠️ |\n| Performance | ✅ | ⚠️ | ✅ |\n| Learning Curve | ✅ | ⚠️ | ❌ |\n\nReady to get started? Check out our [Installation Guide](/guides/installation/) to begin using Helper.db in your project.","src/content/docs/guides/introduction.mdx","13da04b26878cd42","guides/introduction.mdx",true,"examples/discord-bot",{"id":19,"data":21,"body":24,"filePath":25,"digest":26,"legacyId":27,"deferredRender":18},{"title":22,"description":23},"Discord Bot Example","How to use Helper.db in a Discord bot","import { CodeExample } from '../../../components/CodeExample';\n\n# Using Helper.db in a Discord Bot\n\nThis example shows how to integrate Helper.db into a Discord bot for storing user data, guild settings, and more.\n\n## Basic Setup\n\n\u003CCodeExample\n  title=\"Basic Bot Setup\"\n  code={`const { Client, GatewayIntentBits } = require('discord.js');\nconst { Database } = require('helper.db');\n\nconst client = new Client({\n  intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages]\n});\n\n// Initialize databases\nconst userDB = new Database('./data/users.json');\nconst guildDB = new Database('./data/guilds.json');\nconst economyDB = new Database('./data/economy.json');\n\nclient.login('YOUR_BOT_TOKEN');`}\n/>\n\n## User Experience System\n\n\u003CCodeExample\n  title=\"Experience System\"\n  code={`client.on('messageCreate', async (message) => {\n  if (message.author.bot) return;\n  \n  const userId = message.author.id;\n  const guildId = message.guild.id;\n  \n  // Get current XP\n  const currentXP = await userDB.get(\\`\\${guildId}.\\${userId}.xp\\`, 0);\n  const currentLevel = await userDB.get(\\`\\${guildId}.\\${userId}.level\\`, 1);\n  \n  // Add XP (1-5 random)\n  const xpGain = Math.floor(Math.random() * 5) + 1;\n  const newXP = currentXP + xpGain;\n  \n  // Calculate level\n  const requiredXP = currentLevel * 100;\n  let newLevel = currentLevel;\n  \n  if (newXP >= requiredXP) {\n    newLevel++;\n    message.reply(\\`🎉 Congratulations! You leveled up to level \\${newLevel}!\\`);\n  }\n  \n  // Save data\n  await userDB.set(\\`\\${guildId}.\\${userId}.xp\\`, newXP);\n  await userDB.set(\\`\\${guildId}.\\${userId}.level\\`, newLevel);\n  await userDB.set(\\`\\${guildId}.\\${userId}.lastMessage\\`, Date.now());\n});`}\n/>\n\n## Economy System\n\n\u003CCodeExample\n  title=\"Simple Economy Commands\"\n  code={`// Balance command\nclient.on('messageCreate', async (message) => {\n  if (message.content === '!balance') {\n    const userId = message.author.id;\n    const balance = await economyDB.get(\\`users.\\${userId}.coins\\`, 0);\n    \n    message.reply(\\`💰 You have **\\${balance}** coins!\\`);\n  }\n  \n  // Daily reward\n  if (message.content === '!daily') {\n    const userId = message.author.id;\n    const lastDaily = await economyDB.get(\\`users.\\${userId}.lastDaily\\`, 0);\n    const now = Date.now();\n    const oneDay = 24 * 60 * 60 * 1000;\n    \n    if (now - lastDaily \u003C oneDay) {\n      const timeLeft = oneDay - (now - lastDaily);\n      const hours = Math.floor(timeLeft / (60 * 60 * 1000));\n      const minutes = Math.floor((timeLeft % (60 * 60 * 1000)) / (60 * 1000));\n      \n      return message.reply(\\`⏰ You already claimed your daily reward! Try again in \\${hours}h \\${minutes}m\\`);\n    }\n    \n    const reward = Math.floor(Math.random() * 500) + 100;\n    const currentBalance = await economyDB.get(\\`users.\\${userId}.coins\\`, 0);\n    \n    await economyDB.set(\\`users.\\${userId}.coins\\`, currentBalance + reward);\n    await economyDB.set(\\`users.\\${userId}.lastDaily\\`, now);\n    \n    message.reply(\\`🎁 You received **\\${reward}** coins! Your balance is now **\\${currentBalance + reward}** coins.\\`);\n  }\n});`}\n/>\n\n## Guild Settings\n\n\u003CCodeExample\n  title=\"Guild Configuration\"\n  code={`// Set prefix command\nclient.on('messageCreate', async (message) => {\n  if (!message.content.startsWith('!setprefix')) return;\n  if (!message.member.permissions.has('ADMINISTRATOR')) {\n    return message.reply('❌ You need Administrator permission to use this command!');\n  }\n  \n  const args = message.content.split(' ');\n  const newPrefix = args[1];\n  \n  if (!newPrefix) {\n    return message.reply('❌ Please provide a new prefix!');\n  }\n  \n  await guildDB.set(\\`\\${message.guild.id}.prefix\\`, newPrefix);\n  message.reply(\\`✅ Prefix changed to: \\${newPrefix}\\`);\n});\n\n// Get prefix function\nasync function getPrefix(guildId) {\n  return await guildDB.get(\\`\\${guildId}.prefix\\`, '!');\n}\n\n// Welcome system\nclient.on('guildMemberAdd', async (member) => {\n  const guildId = member.guild.id;\n  const welcomeEnabled = await guildDB.get(\\`\\${guildId}.welcome.enabled\\`, false);\n  \n  if (!welcomeEnabled) return;\n  \n  const welcomeChannel = await guildDB.get(\\`\\${guildId}.welcome.channel\\`);\n  const welcomeMessage = await guildDB.get(\\`\\${guildId}.welcome.message\\`, 'Welcome {user} to {guild}!');\n  \n  if (!welcomeChannel) return;\n  \n  const channel = member.guild.channels.cache.get(welcomeChannel);\n  if (!channel) return;\n  \n  const message = welcomeMessage\n    .replace('{user}', member.toString())\n    .replace('{guild}', member.guild.name)\n    .replace('{memberCount}', member.guild.memberCount);\n    \n  channel.send(message);\n});`}\n/>\n\n## Leaderboard System\n\n\u003CCodeExample\n  title=\"XP Leaderboard\"\n  code={`client.on('messageCreate', async (message) => {\n  if (message.content === '!leaderboard' || message.content === '!lb') {\n    const guildId = message.guild.id;\n    \n    // Get all users data for this guild\n    const guildData = await userDB.get(guildId, {});\n    const users = Object.keys(guildData);\n    \n    if (users.length === 0) {\n      return message.reply('❌ No users found in the leaderboard!');\n    }\n    \n    // Sort users by XP\n    const sortedUsers = users\n      .map(userId => ({\n        userId,\n        xp: guildData[userId].xp || 0,\n        level: guildData[userId].level || 1\n      }))\n      .sort((a, b) => b.xp - a.xp)\n      .slice(0, 10); // Top 10\n    \n    let leaderboard = '🏆 **XP Leaderboard**\\\\n\\\\n';\n    \n    for (let i = 0; i \u003C sortedUsers.length; i++) {\n      const user = sortedUsers[i];\n      const member = message.guild.members.cache.get(user.userId);\n      const displayName = member ? member.displayName : 'Unknown User';\n      \n      const medal = i === 0 ? '🥇' : i === 1 ? '🥈' : i === 2 ? '🥉' : \\`\\${i + 1}.\\`;\n      leaderboard += \\`\\${medal} **\\${displayName}** - Level \\${user.level} (\\${user.xp} XP)\\\\n\\`;\n    }\n    \n    message.reply(leaderboard);\n  }\n});`}\n/>\n\n## Data Backup and Migration\n\n\u003CCodeExample\n  title=\"Backup System\"\n  code={`// Backup command (admin only)\nclient.on('messageCreate', async (message) => {\n  if (message.content === '!backup' && message.author.id === 'YOUR_USER_ID') {\n    try {\n      // Get all data\n      const userData = await userDB.all();\n      const guildData = await guildDB.all();\n      const economyData = await economyDB.all();\n      \n      const backup = {\n        timestamp: new Date().toISOString(),\n        users: userData,\n        guilds: guildData,\n        economy: economyData\n      };\n      \n      // Save backup\n      const fs = require('fs');\n      const backupPath = \\`./backups/backup-\\${Date.now()}.json\\`;\n      \n      if (!fs.existsSync('./backups')) {\n        fs.mkdirSync('./backups');\n      }\n      \n      fs.writeFileSync(backupPath, JSON.stringify(backup, null, 2));\n      \n      message.reply(\\`✅ Backup created successfully: \\${backupPath}\\`);\n    } catch (error) {\n      console.error('Backup failed:', error);\n      message.reply('❌ Backup failed! Check console for details.');\n    }\n  }\n});\n\n// Auto-backup every 6 hours\nsetInterval(async () => {\n  console.log('Creating automatic backup...');\n  // Backup logic here\n}, 6 * 60 * 60 * 1000);`}\n/>\n\nThis example demonstrates how Helper.db can be seamlessly integrated into a Discord bot for various features like experience systems, economy, guild settings, and more. The database operations are simple yet powerful, making it easy to build complex bot functionality.","src/content/docs/examples/discord-bot.mdx","37fbf906c07cc408","examples/discord-bot.mdx","reference/database",{"id":28,"data":30,"body":33,"filePath":34,"digest":35,"legacyId":36,"deferredRender":18},{"title":31,"description":32},"Database","The main Database class for Helper.db","import { MethodSignature } from '../../../components/MethodSignature';\nimport { CodeExample } from '../../../components/CodeExample';\nimport { Badge } from '../../../components/ui/badge';\n\n# Database\n\nThe `Database` class is the core of Helper.db, providing all the essential methods for database operations.\n\n## Constructor\n\n\u003CMethodSignature\n  name=\"new Database\"\n  parameters={[\n    {\n      name: \"path\",\n      type: \"string\",\n      description: \"The file path where the database will be stored\"\n    },\n    {\n      name: \"options\",\n      type: \"DatabaseOptions\",\n      optional: true,\n      description: \"Optional configuration for the database\"\n    }\n  ]}\n  returnType=\"Database\"\n  description=\"Creates a new Database instance with the specified file path and options.\"\n/>\n\n\u003CCodeExample\n  title=\"Creating a Database Instance\"\n  code={`const { Database } = require('helper.db');\n\n// Basic usage\nconst db = new Database('./data.json');\n\n// With options\nconst db = new Database('./data.json', {\n  autoWrite: true,\n  writeInterval: 5000,\n  backup: true\n});`}\n/>\n\n## Methods\n\n### get()\n\n\u003CMethodSignature\n  name=\"get\"\n  parameters={[\n    {\n      name: \"key\",\n      type: \"string\",\n      description: \"The key to retrieve the value for\"\n    },\n    {\n      name: \"defaultValue\",\n      type: \"any\",\n      optional: true,\n      description: \"Default value to return if key doesn't exist\"\n    }\n  ]}\n  returnType=\"Promise\u003Cany>\"\n  isAsync={true}\n  description=\"Retrieves a value from the database by its key. Supports dot notation for nested objects.\"\n/>\n\n\u003CCodeExample\n  title=\"Getting Values\"\n  code={`// Get a simple value\nconst name = await db.get('user.name');\n\n// Get with default value\nconst age = await db.get('user.age', 0);\n\n// Get nested object\nconst settings = await db.get('user.settings.theme');`}\n/>\n\n### set()\n\n\u003CMethodSignature\n  name=\"set\"\n  parameters={[\n    {\n      name: \"key\",\n      type: \"string\",\n      description: \"The key to set the value for\"\n    },\n    {\n      name: \"value\",\n      type: \"any\",\n      description: \"The value to store\"\n    }\n  ]}\n  returnType=\"Promise\u003Cboolean>\"\n  isAsync={true}\n  description=\"Sets a value in the database. Creates nested objects automatically when using dot notation.\"\n/>\n\n\u003CCodeExample\n  title=\"Setting Values\"\n  code={`// Set a simple value\nawait db.set('user.name', 'John Doe');\n\n// Set nested values\nawait db.set('user.settings.theme', 'dark');\n\n// Set complex objects\nawait db.set('user.preferences', {\n  notifications: true,\n  language: 'en'\n});`}\n/>\n\n### has()\n\n\u003CMethodSignature\n  name=\"has\"\n  parameters={[\n    {\n      name: \"key\",\n      type: \"string\",\n      description: \"The key to check for existence\"\n    }\n  ]}\n  returnType=\"Promise\u003Cboolean>\"\n  isAsync={true}\n  description=\"Checks if a key exists in the database.\"\n/>\n\n\u003CCodeExample\n  title=\"Checking Key Existence\"\n  code={`// Check if a key exists\nconst userExists = await db.has('user.123');\n\nif (userExists) {\n  console.log('User exists!');\n} else {\n  console.log('User not found');\n}`}\n/>\n\n### delete()\n\n\u003CMethodSignature\n  name=\"delete\"\n  parameters={[\n    {\n      name: \"key\",\n      type: \"string\",\n      description: \"The key to delete from the database\"\n    }\n  ]}\n  returnType=\"Promise\u003Cboolean>\"\n  isAsync={true}\n  description=\"Deletes a key and its value from the database. Returns true if the key existed and was deleted.\"\n/>\n\n\u003CCodeExample\n  title=\"Deleting Keys\"\n  code={`// Delete a specific key\nawait db.delete('user.123.temporaryData');\n\n// Delete entire user object\nawait db.delete('user.123');`}\n/>\n\n### clear()\n\n\u003CMethodSignature\n  name=\"clear\"\n  parameters={[]}\n  returnType=\"Promise\u003Cboolean>\"\n  isAsync={true}\n  description=\"Clears all data from the database.\"\n/>\n\n\u003CCodeExample\n  title=\"Clearing Database\"\n  code={`// Clear all data\nawait db.clear();\nconsole.log('Database cleared!');`}\n/>\n\n### all()\n\n\u003CMethodSignature\n  name=\"all\"\n  parameters={[\n    {\n      name: \"limit\",\n      type: \"number\",\n      optional: true,\n      description: \"Maximum number of entries to return\"\n    }\n  ]}\n  returnType=\"Promise\u003CArray\u003C{key: string, value: any}>>\"\n  isAsync={true}\n  description=\"Returns all key-value pairs in the database as an array of objects.\"\n/>\n\n\u003CCodeExample\n  title=\"Getting All Data\"\n  code={`// Get all data\nconst allData = await db.all();\nconsole.log(allData);\n// Output: [{ key: 'user.123.name', value: 'John' }, ...]\n\n// Get limited data\nconst limitedData = await db.all(10);`}\n/>\n\n## Properties\n\n### size\n\n\u003CMethodSignature\n  name=\"size\"\n  parameters={[]}\n  returnType=\"Promise\u003Cnumber>\"\n  isAsync={true}\n  description=\"Returns the number of top-level keys in the database.\"\n/>\n\n\u003CCodeExample\n  title=\"Getting Database Size\"\n  code={`const size = await db.size;\nconsole.log(\\`Database has \\${size} entries\\`);`}\n/>\n\n## Advanced Usage\n\n### Dot Notation\n\nHelper.db supports dot notation for working with nested objects:\n\n\u003CCodeExample\n  title=\"Working with Nested Objects\"\n  code={`// Set nested values\nawait db.set('guild.123.settings.prefix', '!');\nawait db.set('guild.123.settings.autoRole', true);\n\n// Get nested values\nconst prefix = await db.get('guild.123.settings.prefix');\nconst settings = await db.get('guild.123.settings');\n\n// Check nested keys\nconst hasAutoRole = await db.has('guild.123.settings.autoRole');`}\n/>\n\n### Working with Arrays\n\n\u003CCodeExample\n  title=\"Array Operations\"\n  code={`// Initialize array\nawait db.set('users', []);\n\n// Add to array\nconst users = await db.get('users', []);\nusers.push({ id: 123, name: 'John' });\nawait db.set('users', users);\n\n// Or use helper methods (if available)\nawait db.push('users', { id: 456, name: 'Jane' });`}\n/>","src/content/docs/reference/database.mdx","622cbf4931ff8046","reference/database.mdx"]