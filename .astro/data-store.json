[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.11.1","content-config-digest","8ad251f854d42acc","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://helperdb-docs.vercel.app\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"where\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":false,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":\"0.0.0.0\",\"port\":5000,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":false,\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[null,null,null],\"rehypePlugins\":[[null,{\"themes\":[\"dark-plus\",\"light-plus\"],\"styleOverrides\":{\"borderRadius\":\"0.5rem\"}}],null,[null,{\"experimentalHeadingIdCompat\":false}],null],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false},\"legacy\":{\"collections\":false},\"prefetch\":{\"prefetchAll\":true},\"i18n\":{\"defaultLocale\":\"en\",\"locales\":[\"en\"],\"routing\":{\"prefixDefaultLocale\":false,\"redirectToDefaultLocale\":false,\"fallbackType\":\"redirect\"}}}","docs",["Map",11,12,41,42,54,55,66,67],"index",{"id":11,"data":13,"body":37,"filePath":38,"digest":39,"legacyId":40,"deferredRender":16},{"title":14,"description":15,"editUrl":16,"head":17,"template":18,"hero":19,"sidebar":34,"pagefind":16,"draft":35},"Helper.db Documentation","Welcome to Helper.db - A powerful database helper package for Node.js applications",true,[],"splash",{"tagline":20,"actions":21},"Simplify your database operations with Helper.db",[22,29],{"text":23,"link":24,"variant":25,"icon":26},"Get started","/guides/introduction/","primary",{"type":27,"name":28},"icon","right-arrow",{"text":30,"link":31,"variant":25,"icon":32},"View on GitHub","https://github.com/your-username/helper.db",{"type":27,"name":33},"external",{"hidden":35,"attrs":36},false,{},"import { Card, CardGrid } from '@astrojs/starlight/components';\n\n## Quick start\n\nGet up and running with Helper.db in minutes.\n\n\u003CCardGrid stagger>\n  \u003CCard title=\"Installation\" icon=\"rocket\">\n    Install Helper.db with npm, yarn, or pnpm\n    ```bash\n    npm install helper.db\n    ```\n  \u003C/Card>\n  \u003CCard title=\"Simple Setup\" icon=\"setting\">\n    Connect to your database with just a few lines of code\n    ```javascript\n    const { Database } = require('helper.db');\n    const db = new Database('./data.db');\n    ```\n  \u003C/Card>\n  \u003CCard title=\"Easy Operations\" icon=\"document\">\n    Perform CRUD operations with simple methods\n    ```javascript\n    await db.set('users.123', { name: 'John', age: 30 });\n    const user = await db.get('users.123');\n    ```\n  \u003C/Card>\n  \u003CCard title=\"Advanced Features\" icon=\"star\">\n    Explore advanced features like queries, backups, and more\n  \u003C/Card>\n\u003C/CardGrid>\n\n## Why Helper.db?\n\nHelper.db provides a simple, intuitive API for database operations while maintaining performance and reliability.\n\n- **Easy to use**: Simple API that's perfect for beginners\n- **Powerful**: Advanced features for complex applications  \n- **Fast**: Optimized for performance\n- **Reliable**: Built-in error handling and data validation\n- **Flexible**: Works with SQLite, JSON, and more\n\n## Next steps\n\n\u003CCardGrid>\n  \u003CCard title=\"Read the guide\" icon=\"open-book\">\n    Learn the basics in our [getting started guide](/guides/introduction/).\n  \u003C/Card>\n  \u003CCard title=\"Browse examples\" icon=\"laptop\">\n    See Helper.db in action with practical [examples](/examples/discord-bot/).\n  \u003C/Card>\n  \u003CCard title=\"API reference\" icon=\"setting\">\n    Explore the complete [API documentation](/reference/database/).\n  \u003C/Card>\n\u003C/CardGrid>","src/content/docs/index.mdx","acafa59dafad4ee4","index.mdx","guides/quick-start",{"id":41,"data":43,"body":50,"filePath":51,"digest":52,"legacyId":53,"deferredRender":16},{"title":44,"description":45,"editUrl":16,"head":46,"template":47,"sidebar":48,"pagefind":16,"draft":35},"Quick Start","Get up and running with Helper.db in just a few minutes",[],"doc",{"hidden":35,"attrs":49},{},"import { CodeExample } from '../../src/components/CodeExample.tsx';\n\n## Create Your First Database\n\nLet's start by creating a simple database and performing basic operations.\n\n\u003CCodeExample \n  title=\"Basic Setup\"\n  code={`const { Database } = require('helper.db');\n\n// Create a new database\nconst db = new Database('./my-data.db');\n\n// Set some data\nawait db.set('user.name', 'John Doe');\nawait db.set('user.age', 25);\nawait db.set('user.email', 'john@example.com');\n\n// Get data\nconst name = await db.get('user.name');\nconsole.log(name); // \"John Doe\"\n\n// Get entire user object\nconst user = await db.get('user');\nconsole.log(user); // { name: \"John Doe\", age: 25, email: \"john@example.com\" }`}\n/>\n\n## Working with Arrays\n\nHelper.db makes it easy to work with arrays:\n\n\u003CCodeExample\n  title=\"Array Operations\"\n  code={`// Add items to an array\nawait db.push('fruits', 'apple');\nawait db.push('fruits', 'banana');\nawait db.push('fruits', 'orange');\n\n// Get the array\nconst fruits = await db.get('fruits');\nconsole.log(fruits); // [\"apple\", \"banana\", \"orange\"]\n\n// Remove an item\nawait db.pull('fruits', 'banana');\nconsole.log(await db.get('fruits')); // [\"apple\", \"orange\"]`}\n/>\n\n## Mathematical Operations\n\nPerform math operations directly on stored numbers:\n\n\u003CCodeExample\n  title=\"Math Operations\"\n  code={`// Set initial value\nawait db.set('score', 100);\n\n// Add to the value\nawait db.add('score', 50);\nconsole.log(await db.get('score')); // 150\n\n// Subtract from the value\nawait db.subtract('score', 25);\nconsole.log(await db.get('score')); // 125`}\n/>\n\n## Checking Data Existence\n\n\u003CCodeExample\n  title=\"Data Existence\"\n  code={`// Check if a key exists\nconst hasUser = await db.has('user');\nconsole.log(hasUser); // true\n\nconst hasAdmin = await db.has('admin');\nconsole.log(hasAdmin); // false\n\n// Get all keys\nconst allKeys = await db.all();\nconsole.log(allKeys); // Array of all stored keys`}\n/>\n\n## Deleting Data\n\n\u003CCodeExample\n  title=\"Deleting Data\"\n  code={`// Delete a specific key\nawait db.delete('user.email');\n\n// Delete entire user object\nawait db.delete('user');\n\n// Clear all data (use with caution!)\nawait db.clear();`}\n/>\n\n## Next Steps\n\nGreat! You now know the basics of Helper.db. Here's what you can explore next:\n\n- **[API Reference](/reference/database/)** - Complete documentation of all methods\n- **[Examples](/examples/discord-bot/)** - Real-world usage examples\n- **[Advanced Configuration](/advanced/configuration/)** - Customize Helper.db for your needs\n\n## Common Patterns\n\n### User Management\n```javascript\n// Add a new user\nawait db.set(`users.${userId}`, {\n  name: 'John Doe',\n  email: 'john@example.com',\n  createdAt: Date.now()\n});\n\n// Update user data\nawait db.set(`users.${userId}.lastLogin`, Date.now());\n\n// Get user\nconst user = await db.get(`users.${userId}`);\n```\n\n### Counters and Statistics\n```javascript\n// Initialize counter\nawait db.set('stats.visits', 0);\n\n// Increment on each visit\nawait db.add('stats.visits', 1);\n\n// Track daily stats\nawait db.set(`stats.daily.${today}`, await db.get('stats.visits'));\n```","src/content/docs/guides/quick-start.mdx","444e3d633c93238a","guides/quick-start.mdx","guides/installation",{"id":54,"data":56,"body":62,"filePath":63,"digest":64,"legacyId":65,"deferredRender":16},{"title":57,"description":58,"editUrl":16,"head":59,"template":47,"sidebar":60,"pagefind":16,"draft":35},"Installation","Learn how to install and set up Helper.db in your project",[],{"hidden":35,"attrs":61},{},"## Requirements\n\n- Node.js 14 or higher\n- npm, yarn, or pnpm\n\n## Installation\n\n### Using npm\n\n```bash\nnpm install helper.db\n```\n\n### Using yarn\n\n```bash\nyarn add helper.db\n```\n\n### Using pnpm\n\n```bash\npnpm add helper.db\n```\n\n## Verify Installation\n\nAfter installation, you can verify that Helper.db is working correctly:\n\n```javascript\nconst { Database } = require('helper.db');\n\n// Create a new database instance\nconst db = new Database('./test.db');\n\nconsole.log('Helper.db installed successfully!');\n```\n\n## Next Steps\n\nNow that you have Helper.db installed, you can:\n\n1. Follow the [Quick Start guide](/guides/quick-start/) to learn the basics\n2. Explore the [API Reference](/reference/database/) for detailed documentation\n3. Check out [Examples](/examples/discord-bot/) to see Helper.db in action\n\n## Troubleshooting\n\nIf you encounter any issues during installation:\n\n1. Make sure you have Node.js 14 or higher installed\n2. Clear your npm cache: `npm cache clean --force`\n3. Delete `node_modules` and `package-lock.json`, then reinstall\n4. Check the [GitHub Issues](https://github.com/your-username/helper.db/issues) for known problems","src/content/docs/guides/installation.mdx","b97ed6bc768dfd32","guides/installation.mdx","guides/introduction",{"id":66,"data":68,"body":74,"filePath":75,"digest":76,"legacyId":77,"deferredRender":16},{"title":69,"description":70,"editUrl":16,"head":71,"template":47,"sidebar":72,"pagefind":16,"draft":35},"Introduction","Get started with Helper.db - A powerful database helper package",[],{"hidden":35,"attrs":73},{},"# Welcome to Helper.db\n\nHelper.db is a powerful, easy-to-use database helper package designed to simplify database operations in Node.js applications. Whether you're building a simple bot or a complex web application, Helper.db provides an intuitive API that makes data management effortless.\n\n## What is Helper.db?\n\nHelper.db is a lightweight wrapper around various database engines that provides:\n\n- **Simple API**: Easy-to-understand methods for common operations\n- **Multiple Database Support**: Works with SQLite, JSON, and more\n- **TypeScript Support**: Full type definitions included\n- **Automatic Backups**: Built-in backup and restore functionality\n- **Query Support**: Advanced querying capabilities\n- **Performance Optimized**: Efficient operations for large datasets\n\n## Key Features\n\n### 🚀 Easy to Use\n```javascript\nconst { Database } = require('helper.db');\nconst db = new Database('./mydata.db');\n\n// Set data\nawait db.set('user.123', { name: 'John', age: 25 });\n\n// Get data\nconst user = await db.get('user.123');\nconsole.log(user); // { name: 'John', age: 25 }\n```\n\n### 📊 Multiple Data Types\nHelper.db seamlessly handles various data types:\n- Strings, Numbers, Booleans\n- Objects and Arrays\n- Nested data structures\n- Binary data\n\n### 🔧 Advanced Operations\nBeyond basic CRUD operations, Helper.db offers:\n- Mathematical operations (add, subtract, multiply, divide)\n- Array manipulation (push, pull, includes)\n- Bulk operations\n- Conditional updates\n\n## Who Should Use Helper.db?\n\nHelper.db is perfect for:\n\n- **Discord Bot Developers**: Store user data, guild settings, and more\n- **Web Developers**: Session management, user preferences, caching\n- **Game Developers**: Player stats, leaderboards, game state\n- **API Developers**: Configuration storage, rate limiting data\n- **Students**: Learning database concepts with a simple interface\n\n## Architecture\n\nHelper.db is built with modularity in mind:\n\n```\nHelper.db\n├── Core Engine      # Main database operations\n├── Query System     # Advanced querying\n├── Backup Manager   # Automatic backups\n├── Type System      # TypeScript definitions\n└── Adapters         # Database-specific implementations\n```\n\n## Performance\n\nHelper.db is optimized for performance:\n\n- **Memory Efficient**: Minimal memory footprint\n- **Fast Operations**: Optimized read/write operations\n- **Connection Pooling**: Efficient database connections\n- **Caching**: Intelligent caching for frequently accessed data\n\n## Getting Started\n\nReady to dive in? Here's what you need to do:\n\n1. **[Install Helper.db](/guides/installation/)** - Get the package installed in your project\n2. **[Quick Start Guide](/guides/quick-start/)** - Learn the basics in minutes\n3. **[Browse Examples](/examples/discord-bot/)** - See real-world usage examples\n\n## Community and Support\n\n- **GitHub**: [Report issues and contribute](https://github.com/your-username/helper.db)\n- **Discord**: [Join our community server](https://discord.gg/your-server)\n- **Documentation**: You're already here! Explore the guides and API reference\n\nLet's get started building amazing applications with Helper.db! 🚀","src/content/docs/guides/introduction.mdx","9c42ce4417b6c4cf","guides/introduction.mdx"]