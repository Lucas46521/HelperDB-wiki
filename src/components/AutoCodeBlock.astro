
---
import CodeBlock from './CodeBlock.astro';

interface Props {
  class?: string;
  children?: any;
  [key: string]: any;
}

const { class: className, children, ...props } = Astro.props;

// Função para extrair texto de forma recursiva
function extractText(node: any): string {
  if (typeof node === 'string') {
    return node;
  }
  
  if (Array.isArray(node)) {
    return node.map(extractText).join('');
  }
  
  if (node && typeof node === 'object') {
    if (node.props && node.props.children) {
      return extractText(node.props.children);
    }
    if (node.children) {
      return extractText(node.children);
    }
  }
  
  return '';
}

// Extrair código e linguagem
let code = '';
let language = 'text';

if (children) {
  code = extractText(children).trim();
}

// Extrair linguagem da className
const allClasses = [className, props.class, children?.props?.className].filter(Boolean).join(' ');
const match = allClasses.match(/language-(\w+)/);
language = match ? match[1] : 'text';

// Se não conseguimos extrair código dos children, tentar dos props
if (!code && props.children) {
  code = extractText(props.children).trim();
}
---

{code && <CodeBlock code={code} language={language} />}
