
---
interface Props {
  code: string;
  language?: string;
  title?: string;
}

const { code, language = 'javascript', title } = Astro.props;
---

<div class="codeblock">
  <div class="code-header">
    <div class="window-buttons">
      <span class="dot red"></span>
      <span class="dot yellow"></span>
      <span class="dot green"></span>
    </div>
    <span class="language-label">{title || language}</span>
    <button class="copy-btn" data-code={code}>
      <span class="copy-icon">⧉</span>
      <span class="check-icon">✓</span>
    </button>
  </div>
  <pre class={`language-${language}`}><code>{code}</code></pre>
</div>

<style>
.codeblock {
  background-color: #2e2e38;
  border-radius: 10px;
  overflow: hidden;
  font-family: 'Fira Code', ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, consolas, 'DejaVu Sans Mono', monospace;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
  margin-bottom: 1.5rem;
  border: 1px solid rgba(255, 255, 255, 0.1);
}

.code-header {
  background-color: #3c3c46;
  padding: 0.5rem 1rem;
  display: flex;
  align-items: center;
  justify-content: space-between;
  border-radius: 10px 10px 0 0;
  position: relative;
}

.window-buttons {
  display: flex;
  gap: 6px;
  align-items: center;
}

.dot {
  width: 10px;
  height: 10px;
  border-radius: 50%;
  display: inline-block;
}

.red { 
  background-color: #ff5f56; 
}

.yellow { 
  background-color: #ffbd2e; 
}

.green { 
  background-color: #27c93f; 
}

.language-label {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
  font-size: 0.75rem;
  color: #ccc;
  font-weight: 500;
  text-transform: capitalize;
}

.copy-btn {
  background: none;
  border: none;
  color: #ccc;
  font-size: 1rem;
  cursor: pointer;
  padding: 6px 10px;
  border-radius: 6px;
  transition: all 0.2s ease;
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  min-width: 32px;
  height: 32px;
}

.copy-btn:hover {
  background-color: rgba(255, 255, 255, 0.05);
  color: #fff;
}

.copy-btn .check-icon {
  position: absolute;
  opacity: 0;
  transform: scale(0);
  transition: all 0.3s ease;
}

.copy-btn.copied {
  color: #8f8;
  pointer-events: none;
}

.copy-btn.copied .copy-icon {
  opacity: 0;
  transform: scale(0);
}

.copy-btn.copied .check-icon {
  opacity: 1;
  transform: scale(1);
}

pre {
  margin: 0;
  padding: 1rem;
  overflow-x: auto;
  color: #eee;
  font-size: 0.95rem;
  line-height: 1.5;
  background-color: #2e2e38;
}

code {
  display: block;
  white-space: pre;
  color: #eee;
  background: transparent;
  padding: 0;
}

/* Responsivo */
@media (max-width: 768px) {
  .language-label {
    display: none;
  }
  
  .code-header {
    padding: 0.4rem 0.8rem;
  }
  
  .copy-btn {
    padding: 4px 8px;
    min-width: 28px;
    height: 28px;
  }
  
  .dot {
    width: 8px;
    height: 8px;
  }
  
  pre {
    padding: 0.8rem;
    font-size: 0.875rem;
  }
}

/* Tema escuro específico para o codeblock */
[data-theme='dark'] .codeblock {
  background-color: #2e2e38;
  border-color: rgba(255, 255, 255, 0.1);
}

[data-theme='dark'] .code-header {
  background-color: #3c3c46;
}

[data-theme='dark'] .language-label {
  color: #ccc;
}

[data-theme='dark'] pre {
  background-color: #2e2e38;
}

[data-theme='dark'] code {
  color: #eee;
}

/* Tema claro */
[data-theme='light'] .codeblock {
  background-color: #f8f9fa;
  border-color: rgba(0, 0, 0, 0.1);
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
}

[data-theme='light'] .code-header {
  background-color: #e9ecef;
}

[data-theme='light'] .language-label {
  color: #666;
}

[data-theme='light'] .copy-btn {
  color: #666;
}

[data-theme='light'] .copy-btn:hover {
  background-color: rgba(0, 0, 0, 0.05);
  color: #333;
}

[data-theme='light'] pre {
  background-color: #f8f9fa;
}

[data-theme='light'] code {
  color: #333;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function () {
  const copyButtons = document.querySelectorAll('.copy-btn');

  copyButtons.forEach(button => {
    button.addEventListener('click', async function () {
      const code = this.getAttribute('data-code');
      if (this.classList.contains('copied')) return;

      try {
        await navigator.clipboard.writeText(code);
        this.classList.add('copied');
        setTimeout(() => {
          this.classList.remove('copied');
        }, 600);
      } catch (err) {
        console.error('Erro ao copiar código:', err);
      }
    });
  });
});
</script>
