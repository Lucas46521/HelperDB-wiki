
---
interface Props {
  code: string;
  language?: string;
  title?: string;
}

const { code, language = 'javascript', title } = Astro.props;
const isSmallBlock = code.split('\n').length <= 3 && code.length <= 100;
---

<div class="code-block-container">
  <div class="code-block-header">
    <span class="code-block-title">{title || language}</span>
    <button class="copy-button" data-code={code}>
      <svg class="copy-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
        <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
      </svg>
      <svg class="check-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <polyline points="20,6 9,17 4,12"></polyline>
      </svg>
      <span class="copy-text">Copiar</span>
    </button>
  </div>
  
  <div class="code-block-content">
    <pre class={`language-${language}`}><code>{code}</code></pre>
  </div>
</div>

<style>
.code-block-container {
  border: 1px solid rgb(var(--border));
  border-radius: 0.75rem;
  overflow: hidden;
  margin-bottom: 1.5rem;
  background-color: rgb(var(--card));
}

.code-block-header {
  background: linear-gradient(135deg, rgb(var(--muted)) 0%, rgba(var(--muted), 0.8) 100%);
  padding: 0.75rem 1rem;
  border-bottom: 1px solid rgb(var(--border));
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-radius: 0.75rem 0.75rem 0 0;
}

.code-block-title {
  font-weight: 600;
  font-size: 0.875rem;
  color: rgb(var(--foreground));
  text-transform: capitalize;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.code-block-title::before {
  content: '';
  width: 12px;
  height: 12px;
  border-radius: 50%;
  background-color: #ff5f56;
  box-shadow: 20px 0 0 #ffbd2e, 40px 0 0 #27ca3f;
}

.code-block-content {
  position: relative;
}

.code-block-content pre {
  margin: 0;
  border: 0;
  border-radius: 0 0 0.75rem 0.75rem;
  padding: 1rem;
  overflow-x: auto;
  background-color: rgb(var(--card));
}

.copy-button {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem 0.75rem;
  background-color: rgba(var(--background), 0.8);
  border: 1px solid rgba(var(--border), 0.6);
  border-radius: 0.5rem;
  color: rgb(var(--muted-foreground));
  font-size: 0.875rem;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  overflow: hidden;
}

.copy-button:hover {
  background-color: rgba(var(--muted), 0.8);
  color: rgb(var(--foreground));
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.copy-button .copy-icon,
.copy-button .check-icon {
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.copy-button .check-icon {
  position: absolute;
  opacity: 0;
  transform: scale(0) rotate(-45deg);
}

.copy-button.copied .copy-icon {
  opacity: 0;
  transform: scale(0) rotate(45deg);
}

.copy-button.copied .check-icon {
  opacity: 1;
  transform: scale(1) rotate(0deg);
}

.copy-button.copied {
  background-color: rgba(34, 197, 94, 0.1);
  color: rgb(34, 197, 94);
  border-color: rgba(34, 197, 94, 0.3);
}

.copy-button.copied .copy-text {
  color: rgb(34, 197, 94);
}

@media (max-width: 768px) {
  .copy-text {
    display: none;
  }
  
  .copy-button {
    padding: 0.5rem;
    min-width: auto;
  }
  
  .code-block-title::before {
    display: none;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const copyButtons = document.querySelectorAll('.copy-button');
  
  copyButtons.forEach(button => {
    button.addEventListener('click', async function() {
      const code = this.getAttribute('data-code');
      const copyText = this.querySelector('.copy-text');
      
      // Prevent multiple clicks during animation
      if (this.classList.contains('copied')) return;
      
      try {
        await navigator.clipboard.writeText(code);
        
        // Visual feedback with smooth animation
        this.classList.add('copied');
        if (copyText) {
          copyText.textContent = 'Copiado!';
        }
        
        // Reset after 2.5 seconds to allow animation to complete
        setTimeout(() => {
          this.classList.remove('copied');
          if (copyText) {
            copyText.textContent = 'Copiar';
          }
        }, 2500);
        
      } catch (err) {
        console.error('Erro ao copiar cÃ³digo:', err);
        
        // Fallback para browsers antigos
        const textArea = document.createElement('textarea');
        textArea.value = code;
        textArea.style.position = 'fixed';
        textArea.style.left = '-999999px';
        textArea.style.top = '-999999px';
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        
        try {
          document.execCommand('copy');
          
          this.classList.add('copied');
          if (copyText) {
            copyText.textContent = 'Copiado!';
          }
          
          setTimeout(() => {
            this.classList.remove('copied');
            if (copyText) {
              copyText.textContent = 'Copiar';
            }
          }, 2500);
        } catch (fallbackErr) {
          console.error('Fallback copy failed:', fallbackErr);
        }
        
        document.body.removeChild(textArea);
      }
    });
  });
});
</script>
